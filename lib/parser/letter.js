LetterWriter.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "statement": parse_statement,
        "score_param_decl": parse_score_param_decl,
        "title_decl": parse_title_decl,
        "roles_decl": parse_roles_decl,
        "undo": parse_undo,
        "param_decl": parse_param_decl,
        "param_list": parse_param_list,
        "param_value": parse_param_value,
        "param_range": parse_param_range,
        "nonterm_symbol": parse_nonterm_symbol,
        "rule": parse_rule,
        "nonterm_modifier": parse_nonterm_modifier,
        "rhs_list": parse_rhs_list,
        "rhs": parse_rhs,
        "rhs_expansion": parse_rhs_expansion,
        "hint_with_modifiers": parse_hint_with_modifiers,
        "hint_text": parse_hint_text,
        "weight_text": parse_weight_text,
        "hint_modifier": parse_hint_modifier,
        "times_hidden": parse_times_hidden,
        "max_count": parse_max_count,
        "positive_integer": parse_positive_integer,
        "sym_expr": parse_sym_expr,
        "anonymous_nonterm": parse_anonymous_nonterm,
        "preamble_placeholder_prompt": parse_preamble_placeholder_prompt,
        "sym_modifier": parse_sym_modifier,
        "pause_modifier": parse_pause_modifier,
        "commit_modifier": parse_commit_modifier,
        "random_modifier": parse_random_modifier,
        "no_modifier": parse_no_modifier,
        "optional_pause_modifier": parse_optional_pause_modifier,
        "ptext": parse_ptext,
        "text": parse_text,
        "text_chars": parse_text_chars,
        "symbol": parse_symbol,
        "spc": parse_spc,
        "comment": parse_comment,
        "multi_line_comment": parse_multi_line_comment,
        "single_line_comment": parse_single_line_comment,
        "line_terminator": parse_line_terminator,
        "source_character": parse_source_character,
        "param_func": parse_param_func,
        "param_identifier": parse_param_identifier,
        "bare_param_id": parse_bare_param_id,
        "clothed_param_id": parse_clothed_param_id,
        "numeric_literal": parse_numeric_literal,
        "nonnegative_numeric_literal": parse_nonnegative_numeric_literal,
        "linespc": parse_linespc,
        "param_input": parse_param_input,
        "param_assignment": parse_param_assignment,
        "cumulative_op": parse_cumulative_op,
        "param_terminator": parse_param_terminator,
        "param_expansion": parse_param_expansion,
        "param_expr": parse_param_expr,
        "sum_expr": parse_sum_expr,
        "product_expr": parse_product_expr,
        "relation_expr": parse_relation_expr,
        "equality_expr": parse_equality_expr,
        "primary_expr": parse_primary_expr,
        "string_literal": parse_string_literal,
        "double_quoted_text": parse_double_quoted_text,
        "single_quoted_text": parse_single_quoted_text
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_statement();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_statement();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { title: title,
        				  roles: roles,
        				  nonterm: nontermObj,
        				  start: getStart(),
        				  nonterms: nonterms.map(function(id){return nontermObj[id]}),
        				  params: params,
        				  scoreParam: scoreParam,
        				  scoreParamType: scoreParamType,
        				  undo: undo } })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_statement() {
        var result0;
        
        result0 = parse_title_decl();
        if (result0 === null) {
          result0 = parse_roles_decl();
          if (result0 === null) {
            result0 = parse_score_param_decl();
            if (result0 === null) {
              result0 = parse_param_decl();
              if (result0 === null) {
                result0 = parse_undo();
                if (result0 === null) {
                  result0 = parse_rule();
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_score_param_decl() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 5) === "score") {
          result0 = "score";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"score\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_bare_param_id();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = (function(offset, line, column, id) { return addScoreParam(id[0],id[1]) })(pos.offset, pos.line, pos.column, result2) ? "" : null;
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_title_decl() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "title") {
          result0 = "title";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"title\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 123) {
              result2 = "{";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_text();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 125) {
                  result4 = "}";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, t) { title = t; })(pos0.offset, pos0.line, pos0.column, result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_roles_decl() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "roles") {
          result0 = "roles";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"roles\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_positive_integer();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { roles = n; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_undo() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "undo") {
          result0 = "undo";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"undo\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 123) {
              result2 = "{";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 4) === "wait") {
                  result4 = "wait";
                  advance(pos, 4);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"wait\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 58) {
                      result6 = ":";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        result8 = parse_nonnegative_numeric_literal();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            if (input.charCodeAt(pos.offset) === 125) {
                              result10 = "}";
                              advance(pos, 1);
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"}\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = [];
                              result12 = parse_spc();
                              while (result12 !== null) {
                                result11.push(result12);
                                result12 = parse_spc();
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, w) { undo.wait = w; })(pos0.offset, pos0.line, pos0.column, result0[8]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_param_decl() {
        var result0, result1, result2, result3, result4;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 7) === "control") {
          result0 = "control";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"control\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_spc();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_param_list();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_param_list() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 36) {
          result0 = "$";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result3 = parse_param_range();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_spc();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_spc();
                }
                if (result4 !== null) {
                  result5 = parse_param_value();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_spc();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_spc();
                    }
                    if (result6 !== null) {
                      result7 = (function(offset, line, column, p, r, v) {return addParam(p,v,r[0],r[1])})(pos.offset, pos.line, pos.column, result1, result3, result5) ? "" : null;
                      if (result7 !== null) {
                        pos1 = clone(pos);
                        if (input.charCodeAt(pos.offset) === 44) {
                          result8 = ",";
                          advance(pos, 1);
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            result10 = parse_param_list();
                            if (result10 !== null) {
                              result8 = [result8, result9, result10];
                            } else {
                              result8 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result8 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result8 = null;
                          pos = clone(pos1);
                        }
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = clone(pos0);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos0);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos0);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos0);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_param_value() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 61) {
          result0 = "=";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            result2 = parse_nonnegative_numeric_literal();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, v) { return v })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return 0.5 })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_param_range() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_text();
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "=>") {
              result2 = "=>";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"=>\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_text();
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 125) {
                  result4 = "}";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, min, max) { return [min,max] })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return [LetterWriter.defaultNever,LetterWriter.defaultAlways] })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_nonterm_symbol() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 64) {
          result0 = "@";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s.toLowerCase(); })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_rule() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_nonterm_modifier();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_nonterm_modifier();
        }
        if (result0 !== null) {
          result1 = parse_nonterm_symbol();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_sym_modifier();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_sym_modifier();
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = (function(offset, line, column, mods, lhs, q) {return pushLhs(lhs)})(pos.offset, pos.line, pos.column, result0, result1, result2) ? "" : null;
                if (result4 !== null) {
                  result5 = parse_max_count();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    if (input.substr(pos.offset, 2) === "=>") {
                      result6 = "=>";
                      advance(pos, 2);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"=>\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        result8 = parse_preamble_placeholder_prompt();
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_spc();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_spc();
                          }
                          if (result9 !== null) {
                            result10 = (function(offset, line, column, mods, lhs, q, maxUsage, ppp) {return setNontermProperties(currentLhs(),extend(extend(extend((maxUsage?maxUsage:{}),mods.reduce(LetterWriter.extend,{})),q.reduce(LetterWriter.extend,{})),ppp))})(pos.offset, pos.line, pos.column, result0, result1, result2, result5, result8) ? "" : null;
                            if (result10 !== null) {
                              if (input.charCodeAt(pos.offset) === 123) {
                                result11 = "{";
                                advance(pos, 1);
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"{\"");
                                }
                              }
                              if (result11 !== null) {
                                result12 = parse_rhs_list();
                                if (result12 !== null) {
                                  if (input.charCodeAt(pos.offset) === 125) {
                                    result13 = "}";
                                    advance(pos, 1);
                                  } else {
                                    result13 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (result13 !== null) {
                                    result14 = [];
                                    result15 = parse_spc();
                                    while (result15 !== null) {
                                      result14.push(result15);
                                      result15 = parse_spc();
                                    }
                                    if (result14 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, mods, lhs, q, maxUsage, ppp) {return popLhs()})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[5], result0[8]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_nonterm_modifier() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "pause") {
          result0 = "pause";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"pause\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { pause: true } })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 6) === "commit") {
            result0 = "commit";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"commit\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_spc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return { commit: true } })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 6) === "random") {
              result0 = "random";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"random\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_spc();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return { random: true } })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 35) {
                result0 = "#";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"#\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_positive_integer();
                if (result1 !== null) {
                  result2 = [];
                  result3 = parse_spc();
                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_spc();
                  }
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, n) { return { role: n.toString() } })(pos0.offset, pos0.line, pos0.column, result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 35) {
                  result0 = "#";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"#\"");
                  }
                }
                if (result0 !== null) {
                  if (input.charCodeAt(pos.offset) === 43) {
                    result1 = "+";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result1 === null) {
                    if (input.charCodeAt(pos.offset) === 45) {
                      result1 = "-";
                      advance(pos, 1);
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (result1 === null) {
                      if (input.charCodeAt(pos.offset) === 61) {
                        result1 = "=";
                        advance(pos, 1);
                      } else {
                        result1 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"=\"");
                        }
                      }
                    }
                  }
                  if (result1 !== null) {
                    result2 = [];
                    result3 = parse_spc();
                    while (result3 !== null) {
                      result2.push(result3);
                      result3 = parse_spc();
                    }
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, r) { return { role: r } })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_rhs_list() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_rhs();
        if (result0 !== null) {
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 124) {
            result1 = "|";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result3 = parse_rhs_list();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos1);
              }
            } else {
              result1 = null;
              pos = clone(pos1);
            }
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_rhs() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_hint_with_modifiers();
        if (result0 !== null) {
          result1 = parse_rhs_expansion();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, hc, symbols) { addRule(hc[0],hc[1],symbols,hc[2]) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_rhs_expansion() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result0 = [];
        result1 = parse_sym_expr();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_sym_expr();
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, symbols) { return symbols })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hint_with_modifiers() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_weight_text();
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "=>") {
            result1 = "=>";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=>\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_hint_text();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_spc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_spc();
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_hint_modifier();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_hint_modifier();
                }
                if (result4 !== null) {
                  if (input.substr(pos.offset, 2) === "=>") {
                    result5 = "=>";
                    advance(pos, 2);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=>\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, weight, text, mods) { return [weight, text, mods.reduce(LetterWriter.extend,{})] })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_hint_text();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_spc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
            if (result1 !== null) {
              result2 = [];
              result3 = parse_hint_modifier();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_hint_modifier();
              }
              if (result2 !== null) {
                if (input.substr(pos.offset, 2) === "=>") {
                  result3 = "=>";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"=>\"");
                  }
                }
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, text, mods) { return [null, text, mods.reduce(LetterWriter.extend,{})] })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = [];
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return [null, "", {}] })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_hint_text() {
        var result0;
        
        result0 = parse_weight_text();
        if (result0 === null) {
          result0 = parse_ptext();
          if (result0 === null) {
            result0 = "";
          }
        }
        return result0;
      }
      
      function parse_weight_text() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_spc();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_spc();
        }
        if (result0 !== null) {
          result1 = parse_param_expr();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_spc();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_spc();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, f) { return f.asText() })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_hint_modifier() {
        var result0;
        
        result0 = parse_times_hidden();
        if (result0 === null) {
          result0 = parse_max_count();
        }
        return result0;
      }
      
      function parse_times_hidden() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 4) === "hide") {
              result2 = "hide";
              advance(pos, 4);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"hide\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_positive_integer();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 93) {
                      result6 = "]";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return {timesHidden:n} })(pos0.offset, pos0.line, pos0.column, result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 91) {
            result0 = "[";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_spc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
            if (result1 !== null) {
              if (input.substr(pos.offset, 4) === "hide") {
                result2 = "hide";
                advance(pos, 4);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"hide\"");
                }
              }
              if (result2 !== null) {
                result3 = [];
                result4 = parse_spc();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
                if (result3 !== null) {
                  if (input.substr(pos.offset, 4) === "once") {
                    result4 = "once";
                    advance(pos, 4);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"once\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_spc();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_spc();
                    }
                    if (result5 !== null) {
                      if (input.charCodeAt(pos.offset) === 93) {
                        result6 = "]";
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result6 !== null) {
                        result7 = [];
                        result8 = parse_spc();
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_spc();
                        }
                        if (result7 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return {timesHidden:1} })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 91) {
              result0 = "[";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_spc();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
              if (result1 !== null) {
                if (input.substr(pos.offset, 4) === "hide") {
                  result2 = "hide";
                  advance(pos, 4);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"hide\"");
                  }
                }
                if (result2 !== null) {
                  result3 = [];
                  result4 = parse_spc();
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                  if (result3 !== null) {
                    if (input.substr(pos.offset, 5) === "twice") {
                      result4 = "twice";
                      advance(pos, 5);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"twice\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = [];
                      result6 = parse_spc();
                      while (result6 !== null) {
                        result5.push(result6);
                        result6 = parse_spc();
                      }
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result6 = "]";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = [];
                          result8 = parse_spc();
                          while (result8 !== null) {
                            result7.push(result8);
                            result8 = parse_spc();
                          }
                          if (result7 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return {timesHidden:2} })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 91) {
                result0 = "[";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result0 !== null) {
                result1 = [];
                result2 = parse_spc();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_spc();
                }
                if (result1 !== null) {
                  if (input.substr(pos.offset, 4) === "hide") {
                    result2 = "hide";
                    advance(pos, 4);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"hide\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = [];
                    result4 = parse_spc();
                    while (result4 !== null) {
                      result3.push(result4);
                      result4 = parse_spc();
                    }
                    if (result3 !== null) {
                      if (input.substr(pos.offset, 6) === "thrice") {
                        result4 = "thrice";
                        advance(pos, 6);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"thrice\"");
                        }
                      }
                      if (result4 !== null) {
                        result5 = [];
                        result6 = parse_spc();
                        while (result6 !== null) {
                          result5.push(result6);
                          result6 = parse_spc();
                        }
                        if (result5 !== null) {
                          if (input.charCodeAt(pos.offset) === 93) {
                            result6 = "]";
                            advance(pos, 1);
                          } else {
                            result6 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result6 !== null) {
                            result7 = [];
                            result8 = parse_spc();
                            while (result8 !== null) {
                              result7.push(result8);
                              result8 = parse_spc();
                            }
                            if (result7 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return {timesHidden:3} })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_max_count() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_spc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_spc();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "use") {
              result2 = "use";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"use\"");
              }
            }
            if (result2 !== null) {
              result4 = parse_spc();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_positive_integer();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_spc();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_spc();
                  }
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 93) {
                      result6 = "]";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return {maxUsage:n} })(pos0.offset, pos0.line, pos0.column, result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 91) {
            result0 = "[";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_spc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_spc();
            }
            if (result1 !== null) {
              pos2 = clone(pos);
              if (input.substr(pos.offset, 3) === "use") {
                result2 = "use";
                advance(pos, 3);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"use\"");
                }
              }
              if (result2 !== null) {
                result4 = parse_spc();
                if (result4 !== null) {
                  result3 = [];
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                } else {
                  result3 = null;
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                if (input.substr(pos.offset, 4) === "once") {
                  result3 = "once";
                  advance(pos, 4);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"once\"");
                  }
                }
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_spc();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_spc();
                  }
                  if (result4 !== null) {
                    if (input.charCodeAt(pos.offset) === 93) {
                      result5 = "]";
                      advance(pos, 1);
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result5 !== null) {
                      result6 = [];
                      result7 = parse_spc();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_spc();
                      }
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return {maxUsage:1} })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 91) {
              result0 = "[";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_spc();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_spc();
              }
              if (result1 !== null) {
                pos2 = clone(pos);
                if (input.substr(pos.offset, 3) === "use") {
                  result2 = "use";
                  advance(pos, 3);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"use\"");
                  }
                }
                if (result2 !== null) {
                  result4 = parse_spc();
                  if (result4 !== null) {
                    result3 = [];
                    while (result4 !== null) {
                      result3.push(result4);
                      result4 = parse_spc();
                    }
                  } else {
                    result3 = null;
                  }
                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  if (input.substr(pos.offset, 5) === "twice") {
                    result3 = "twice";
                    advance(pos, 5);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"twice\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = [];
                    result5 = parse_spc();
                    while (result5 !== null) {
                      result4.push(result5);
                      result5 = parse_spc();
                    }
                    if (result4 !== null) {
                      if (input.charCodeAt(pos.offset) === 93) {
                        result5 = "]";
                        advance(pos, 1);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result5 !== null) {
                        result6 = [];
                        result7 = parse_spc();
                        while (result7 !== null) {
                          result6.push(result7);
                          result7 = parse_spc();
                        }
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) { return {maxUsage:2} })(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 91) {
                result0 = "[";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result0 !== null) {
                result1 = [];
                result2 = parse_spc();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_spc();
                }
                if (result1 !== null) {
                  pos2 = clone(pos);
                  if (input.substr(pos.offset, 3) === "use") {
                    result2 = "use";
                    advance(pos, 3);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"use\"");
                    }
                  }
                  if (result2 !== null) {
                    result4 = parse_spc();
                    if (result4 !== null) {
                      result3 = [];
                      while (result4 !== null) {
                        result3.push(result4);
                        result4 = parse_spc();
                      }
                    } else {
                      result3 = null;
                    }
                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    if (input.substr(pos.offset, 6) === "thrice") {
                      result3 = "thrice";
                      advance(pos, 6);
                    } else {
                      result3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"thrice\"");
                      }
                    }
                    if (result3 !== null) {
                      result4 = [];
                      result5 = parse_spc();
                      while (result5 !== null) {
                        result4.push(result5);
                        result5 = parse_spc();
                      }
                      if (result4 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result5 = "]";
                          advance(pos, 1);
                        } else {
                          result5 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result5 !== null) {
                          result6 = [];
                          result7 = parse_spc();
                          while (result7 !== null) {
                            result6.push(result7);
                            result7 = parse_spc();
                          }
                          if (result6 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return {maxUsage:3} })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_positive_integer() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[1-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, h, t) { t.unshift(h); return parseInt (t.join(""), 10); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_sym_expr() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_preamble_placeholder_prompt();
        if (result0 !== null) {
          result1 = parse_nonterm_symbol();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_sym_modifier();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_sym_modifier();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ppp, sym, q) { return makeNontermReference(sym,extend(ppp,q.reduce(LetterWriter.extend,{}))) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_preamble_placeholder_prompt();
          if (result0 !== null) {
            result1 = parse_anonymous_nonterm();
            if (result1 !== null) {
              result2 = [];
              result3 = parse_sym_modifier();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_sym_modifier();
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, ppp, sym, q) { return makeAnonNontermReference(sym,extend(ppp,q.reduce(LetterWriter.extend,{}))) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_param_input();
            if (result0 === null) {
              result0 = parse_param_assignment();
              if (result0 === null) {
                result0 = parse_param_expansion();
                if (result0 === null) {
                  pos0 = clone(pos);
                  result0 = parse_text();
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, text) { return makeTerm(text) })(pos0.offset, pos0.line, pos0.column, result0);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_anonymous_nonterm() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = (function(offset, line, column) {return pushLhs(makeAnonId())})(pos.offset, pos.line, pos.column) ? "" : null;
          if (result1 !== null) {
            result2 = parse_rhs_list();
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 125) {
                result3 = "}";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return popLhs(); })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_preamble_placeholder_prompt() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_rhs_expansion();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 124) {
              result2 = "|";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_ptext();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 124) {
                  result4 = "|";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"|\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_ptext();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    if (input.charCodeAt(pos.offset) === 93) {
                      result6 = "]";
                      advance(pos, 1);
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_spc();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_spc();
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, preamble, placeholder, prompt) { return {preamble:preamble, placeholder:placeholder, prompt:prompt}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 91) {
            result0 = "[";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_ptext();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 124) {
                result2 = "|";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"|\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_ptext();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  if (input.charCodeAt(pos.offset) === 93) {
                    result4 = "]";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_spc();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_spc();
                    }
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, placeholder, prompt) { return {placeholder:placeholder, prompt:prompt}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 91) {
              result0 = "[";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_ptext();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 93) {
                  result2 = "]";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }
                if (result2 !== null) {
                  result3 = [];
                  result4 = parse_spc();
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, prompt) { return {prompt:prompt}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = [];
              if (result0 !== null) {
                result0 = (function(offset, line, column) { return {}; })(pos0.offset, pos0.line, pos0.column);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_sym_modifier() {
        var result0;
        
        result0 = parse_pause_modifier();
        if (result0 === null) {
          result0 = parse_commit_modifier();
          if (result0 === null) {
            result0 = parse_random_modifier();
          }
        }
        return result0;
      }
      
      function parse_pause_modifier() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 59) {
          result0 = ";";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { pause: true } })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_commit_modifier() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 33) {
          result0 = "!";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { commit: true } })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_random_modifier() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 63) {
          result0 = "?";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"?\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { random: true } })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_no_modifier() {
        var result0;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        if (result0 !== null) {
          result0 = (function(offset, line, column) { return { } })(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_optional_pause_modifier() {
        var result0;
        
        result0 = parse_pause_modifier();
        if (result0 === null) {
          result0 = parse_no_modifier();
        }
        return result0;
      }
      
      function parse_ptext() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_nonterm_symbol();
        if (result0 !== null) {
          result1 = parse_ptext();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s, tail) { return "@" + s + tail })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_param_expansion();
          if (result0 !== null) {
            result1 = parse_ptext();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, p, tail) { return p.asText() + tail })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_text();
            if (result0 !== null) {
              result1 = parse_ptext();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, t, tail) { return t + tail })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_text() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 92) {
          result0 = "\\";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result0 !== null) {
          if (/^[#[\]{}|=@$]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[#[\\]{}|=@$]");
            }
          }
          if (result1 !== null) {
            result2 = parse_text();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, escaped, tail) { return escaped + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 2) === "\\\\") {
            result0 = "\\\\";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\\\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_text();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tail) { return "\\\\" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "=>") {
              result0 = "=>";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"=>\"");
              }
            }
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result1 = "=";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result1 !== null) {
                result2 = parse_text();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, tail) { return "=" + tail; })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              pos2 = clone(pos);
              reportFailures++;
              pos3 = clone(pos);
              if (input.charCodeAt(pos.offset) === 36) {
                result0 = "$";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"$\"");
                }
              }
              if (result0 !== null) {
                if (/^[A-Za-z_#{]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[A-Za-z_#{]");
                  }
                }
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos3);
                }
              } else {
                result0 = null;
                pos = clone(pos3);
              }
              reportFailures--;
              if (result0 === null) {
                result0 = "";
              } else {
                result0 = null;
                pos = clone(pos2);
              }
              if (result0 !== null) {
                if (input.charCodeAt(pos.offset) === 36) {
                  result1 = "$";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"$\"");
                  }
                }
                if (result1 !== null) {
                  result2 = parse_text();
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, tail) { return "$" + tail; })(pos0.offset, pos0.line, pos0.column, result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_comment();
                if (result0 !== null) {
                  result1 = parse_text();
                  result1 = result1 !== null ? result1 : "";
                  if (result1 !== null) {
                    result0 = [result0, result1];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, tail) { return tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = parse_text_chars();
                  if (result0 !== null) {
                    result1 = parse_text();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, head, tail) { return head + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_text_chars() {
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (/^[^#[\]{}|=@$]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^#[\\]{}|=@$]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^#[\]{}|=@$]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^#[\\]{}|=@$]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) { return chars.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[A-Za-z_]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z_]");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9A-Za-z_]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[0-9A-Za-z_]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9A-Za-z_]");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, first, rest) { return first + rest.join(""); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_spc() {
        var result0;
        var pos0;
        
        if (/^[ \t\n\r]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\n\\r]");
          }
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_comment();
          if (result0 !== null) {
            result0 = (function(offset, line, column) { return ""; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_comment() {
        var result0;
        
        result0 = parse_multi_line_comment();
        if (result0 === null) {
          result0 = parse_single_line_comment();
        }
        return result0;
      }
      
      function parse_multi_line_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.substr(pos.offset, 2) === "*/") {
            result2 = "*/";
            advance(pos, 2);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "*/") {
              result2 = "*/";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_single_line_comment() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "//") {
          result0 = "//";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_line_terminator();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_source_character();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_line_terminator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_source_character();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_line_terminator() {
        var result0;
        
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        return result0;
      }
      
      function parse_source_character() {
        var result0;
        
        if (input.length > pos.offset) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return result0;
      }
      
      function parse_param_func() {
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_param_identifier();
        if (result0 !== null) {
          result0 = (function(offset, line, column, x) { return new LetterWriter.ParamFunc ({op:x[0],param:x[1].toLowerCase()}) })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        return result0;
      }
      
      function parse_param_identifier() {
        var result0;
        
        result0 = parse_bare_param_id();
        if (result0 === null) {
          result0 = parse_clothed_param_id();
        }
        return result0;
      }
      
      function parse_bare_param_id() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "$#") {
          result0 = "$#";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, x) { return ["$#",x] })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 36) {
            result0 = "$";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_symbol();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 91) {
                result2 = "[";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (result2 !== null) {
                result3 = [];
                result4 = parse_spc();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
                if (result3 !== null) {
                  if (input.substr(pos.offset, 2) === "$#") {
                    result4 = "$#";
                    advance(pos, 2);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"$#\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_spc();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_spc();
                    }
                    if (result5 !== null) {
                      if (input.charCodeAt(pos.offset) === 93) {
                        result6 = "]";
                        advance(pos, 1);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, x) { return ["$#",x] })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 36) {
              result0 = "$";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"$\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_symbol();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 91) {
                  result2 = "[";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"[\"");
                  }
                }
                if (result2 !== null) {
                  result3 = [];
                  result4 = parse_spc();
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                  if (result3 !== null) {
                    result4 = parse_positive_integer();
                    if (result4 !== null) {
                      result5 = [];
                      result6 = parse_spc();
                      while (result6 !== null) {
                        result5.push(result6);
                        result6 = parse_spc();
                      }
                      if (result5 !== null) {
                        if (input.charCodeAt(pos.offset) === 93) {
                          result6 = "]";
                          advance(pos, 1);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, x, n) { return ["$",x + "[" + n + "]"] })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 36) {
                result0 = "$";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"$\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_symbol();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, x) { return ["$",x] })(pos0.offset, pos0.line, pos0.column, result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_clothed_param_id() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "$#{") {
          result0 = "$#{";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"$#{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_symbol();
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 125) {
              result2 = "}";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, x) { return ["$#",x] })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 3) === "$#{") {
            result0 = "$#{";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$#{\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_symbol();
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 125) {
                result2 = "}";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result2 !== null) {
                result3 = [];
                result4 = parse_spc();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_spc();
                }
                if (result3 !== null) {
                  if (input.charCodeAt(pos.offset) === 91) {
                    result4 = "[";
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"[\"");
                    }
                  }
                  if (result4 !== null) {
                    result5 = [];
                    result6 = parse_spc();
                    while (result6 !== null) {
                      result5.push(result6);
                      result6 = parse_spc();
                    }
                    if (result5 !== null) {
                      if (input.substr(pos.offset, 2) === "$#") {
                        result6 = "$#";
                        advance(pos, 2);
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"$#\"");
                        }
                      }
                      if (result6 !== null) {
                        result7 = [];
                        result8 = parse_spc();
                        while (result8 !== null) {
                          result7.push(result8);
                          result8 = parse_spc();
                        }
                        if (result7 !== null) {
                          if (input.charCodeAt(pos.offset) === 93) {
                            result8 = "]";
                            advance(pos, 1);
                          } else {
                            result8 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result8 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, x) { return ["$#",x] })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 2) === "${") {
              result0 = "${";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"${\"");
              }
            }
            if (result0 !== null) {
              result1 = parse_symbol();
              if (result1 !== null) {
                if (input.charCodeAt(pos.offset) === 125) {
                  result2 = "}";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (result2 !== null) {
                  result3 = [];
                  result4 = parse_spc();
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_spc();
                  }
                  if (result3 !== null) {
                    if (input.charCodeAt(pos.offset) === 91) {
                      result4 = "[";
                      advance(pos, 1);
                    } else {
                      result4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"[\"");
                      }
                    }
                    if (result4 !== null) {
                      result5 = [];
                      result6 = parse_spc();
                      while (result6 !== null) {
                        result5.push(result6);
                        result6 = parse_spc();
                      }
                      if (result5 !== null) {
                        result6 = parse_positive_integer();
                        if (result6 !== null) {
                          result7 = [];
                          result8 = parse_spc();
                          while (result8 !== null) {
                            result7.push(result8);
                            result8 = parse_spc();
                          }
                          if (result7 !== null) {
                            if (input.charCodeAt(pos.offset) === 93) {
                              result8 = "]";
                              advance(pos, 1);
                            } else {
                              result8 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"]\"");
                              }
                            }
                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, x, n) { return ["$",x + "[" + n + "]"] })(pos0.offset, pos0.line, pos0.column, result0[1], result0[6]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 2) === "${") {
                result0 = "${";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"${\"");
                }
              }
              if (result0 !== null) {
                result1 = parse_symbol();
                if (result1 !== null) {
                  if (input.charCodeAt(pos.offset) === 125) {
                    result2 = "}";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, x) { return ["$",x] })(pos0.offset, pos0.line, pos0.column, result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_numeric_literal() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_nonnegative_numeric_literal();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return n; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_linespc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_linespc();
            }
            if (result1 !== null) {
              result2 = parse_nonnegative_numeric_literal();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, n) { return -n; })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_nonnegative_numeric_literal() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result1 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 37) {
            result1 = "%";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"%\"");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return parseFloat (n.join("")) / 100; })(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result0 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result1 = ".";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result1 !== null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  if (/^[0-9]/.test(input.charAt(pos.offset))) {
                    result3 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, h, t) { return parseFloat (h + "." + t.join("")); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            if (/^[0-9]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, n) { return parseFloat (n.join("")); })(pos0.offset, pos0.line, pos0.column, result0);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_linespc() {
        var result0;
        
        if (/^[ \t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        if (result0 === null) {
          result0 = parse_multi_line_comment();
        }
        return result0;
      }
      
      function parse_param_input() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_param_identifier();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "@=?") {
              result2 = "@=?";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"@=?\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_optional_pause_modifier();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, mods) { return new LetterWriter.ParamInput ({type:id[0],id:id[1].toLowerCase(),local:true,mods:mods}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_param_identifier();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_linespc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_linespc();
            }
            if (result1 !== null) {
              if (input.substr(pos.offset, 2) === "=?") {
                result2 = "=?";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=?\"");
                }
              }
              if (result2 !== null) {
                result3 = parse_optional_pause_modifier();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, id, mods) { return new LetterWriter.ParamInput ({type:id[0],id:id[1].toLowerCase(),local:false,mods:mods}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_param_assignment() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_param_identifier();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "@=") {
              result2 = "@=";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"@=\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_linespc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_linespc();
              }
              if (result3 !== null) {
                result4 = parse_param_expr();
                if (result4 !== null) {
                  result5 = parse_param_terminator();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, expr) { return new LetterWriter.ParamAssignment ({type:id[0],id:id[1].toLowerCase(),value:expr,local:true}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_param_identifier();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_linespc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_linespc();
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 61) {
                result2 = "=";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              if (result2 !== null) {
                result3 = [];
                result4 = parse_linespc();
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_linespc();
                }
                if (result3 !== null) {
                  result4 = parse_param_expr();
                  if (result4 !== null) {
                    result5 = parse_param_terminator();
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, id, expr) { return new LetterWriter.ParamAssignment ({type:id[0],id:id[1].toLowerCase(),value:expr,local:false}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_param_identifier();
            if (result0 !== null) {
              result1 = [];
              result2 = parse_linespc();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_linespc();
              }
              if (result1 !== null) {
                result2 = parse_cumulative_op();
                if (result2 !== null) {
                  if (input.charCodeAt(pos.offset) === 61) {
                    result3 = "=";
                    advance(pos, 1);
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                  if (result3 !== null) {
                    result4 = [];
                    result5 = parse_linespc();
                    while (result5 !== null) {
                      result4.push(result5);
                      result5 = parse_linespc();
                    }
                    if (result4 !== null) {
                      result5 = parse_param_expr();
                      if (result5 !== null) {
                        result6 = parse_param_terminator();
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, id, op, increment_expr) { var param_func = new LetterWriter.ParamFunc ({op:id[0],param:id[1].toLowerCase()})
              var rhs_expr = new LetterWriter.ParamFunc ({l:param_func,r:increment_expr,op:op})
              return new LetterWriter.ParamAssignment ({type:id[0],id:id[1].toLowerCase(),value:rhs_expr,local:false}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[5]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_param_identifier();
              if (result0 !== null) {
                result1 = [];
                result2 = parse_linespc();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_linespc();
                }
                if (result1 !== null) {
                  if (input.substr(pos.offset, 2) === "++") {
                    result2 = "++";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"++\"");
                    }
                  }
                  if (result2 !== null) {
                    result3 = [];
                    result4 = parse_linespc();
                    while (result4 !== null) {
                      result3.push(result4);
                      result4 = parse_linespc();
                    }
                    if (result3 !== null) {
                      result4 = parse_param_terminator();
                      if (result4 !== null) {
                        result0 = [result0, result1, result2, result3, result4];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, id) { var param_func = new LetterWriter.ParamFunc ({op:id[0],param:id[1].toLowerCase()})
                var increment_expr = new LetterWriter.ParamFunc ({op:"#",value:1})
                var rhs_expr = new LetterWriter.ParamFunc ({l:param_func,r:increment_expr,op:"+"})
                return new LetterWriter.ParamAssignment ({type:id[0],id:id[1].toLowerCase(),value:rhs_expr,local:false}) })(pos0.offset, pos0.line, pos0.column, result0[0]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_param_identifier();
                if (result0 !== null) {
                  result1 = [];
                  result2 = parse_linespc();
                  while (result2 !== null) {
                    result1.push(result2);
                    result2 = parse_linespc();
                  }
                  if (result1 !== null) {
                    if (input.substr(pos.offset, 2) === "--") {
                      result2 = "--";
                      advance(pos, 2);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"--\"");
                      }
                    }
                    if (result2 !== null) {
                      result3 = [];
                      result4 = parse_linespc();
                      while (result4 !== null) {
                        result3.push(result4);
                        result4 = parse_linespc();
                      }
                      if (result3 !== null) {
                        result4 = parse_param_terminator();
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, id) { var param_func = new LetterWriter.ParamFunc ({op:id[0],param:id[1].toLowerCase()})
                  var increment_expr = new LetterWriter.ParamFunc ({op:"#",value:1})
                  var rhs_expr = new LetterWriter.ParamFunc ({l:param_func,r:increment_expr,op:"-"})
                  return new LetterWriter.ParamAssignment ({type:id[0],id:id[1].toLowerCase(),value:rhs_expr,local:false}) })(pos0.offset, pos0.line, pos0.column, result0[0]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_cumulative_op() {
        var result0;
        
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 47) {
              result0 = "/";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 42) {
                result0 = "*";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*\"");
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_param_terminator() {
        var result0;
        var pos0;
        
        result0 = parse_line_terminator();
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 59) {
            result0 = ";";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (result0 === null) {
            pos0 = clone(pos);
            reportFailures++;
            result0 = parse_source_character();
            reportFailures--;
            if (result0 === null) {
              result0 = "";
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_param_expansion() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = clone(pos);
        result0 = parse_clothed_param_id();
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) { return new LetterWriter.ParamReference (id[0], id[1]) })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_bare_param_id();
          if (result0 !== null) {
            result1 = parse_param_terminator();
            if (result1 === null) {
              pos2 = clone(pos);
              reportFailures++;
              pos3 = clone(pos);
              result1 = [];
              result2 = parse_linespc();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_linespc();
              }
              if (result1 !== null) {
                pos4 = clone(pos);
                reportFailures++;
                result2 = parse_linespc();
                if (result2 === null) {
                  if (input.charCodeAt(pos.offset) === 61) {
                    result2 = "=";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }
                }
                reportFailures--;
                if (result2 === null) {
                  result2 = "";
                } else {
                  result2 = null;
                  pos = clone(pos4);
                }
                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = clone(pos3);
                }
              } else {
                result1 = null;
                pos = clone(pos3);
              }
              reportFailures--;
              if (result1 !== null) {
                result1 = "";
                pos = clone(pos2);
              } else {
                result1 = null;
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, id) { return new LetterWriter.ParamReference (id[0], id[1]) })(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_param_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_sum_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result2 = ".";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_linespc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_linespc();
              }
              if (result3 !== null) {
                result4 = parse_param_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, op, r) { return new LetterWriter.ParamFunc ({l:l,r:r,op:op}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_sum_expr();
        }
        return result0;
      }
      
      function parse_sum_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_product_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 43) {
              result2 = "+";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"+\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "||") {
                result2 = "||";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"||\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 2).toLowerCase() === "or") {
                  result2 = input.substr(pos.offset, 2);
                  advance(pos, 2);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"or\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos.offset) === 45) {
                    result2 = "-";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_linespc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_linespc();
              }
              if (result3 !== null) {
                result4 = parse_sum_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, op, r) { return new LetterWriter.ParamFunc ({l:l,r:r,op:op}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_product_expr();
        }
        return result0;
      }
      
      function parse_product_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_relation_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 42) {
              result2 = "*";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "&&") {
                result2 = "&&";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"&&\"");
                }
              }
              if (result2 === null) {
                if (input.substr(pos.offset, 3).toLowerCase() === "and") {
                  result2 = input.substr(pos.offset, 3);
                  advance(pos, 3);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"and\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos.offset) === 47) {
                    result2 = "/";
                    advance(pos, 1);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"/\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.substr(pos.offset, 2).toLowerCase() === "vs") {
                      result2 = input.substr(pos.offset, 2);
                      advance(pos, 2);
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"vs\"");
                      }
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_linespc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_linespc();
              }
              if (result3 !== null) {
                result4 = parse_product_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, op, r) { return new LetterWriter.ParamFunc ({l:l,r:r,op:op}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 33) {
            result0 = "!";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"!\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_linespc();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_linespc();
            }
            if (result1 !== null) {
              result2 = parse_product_expr();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, l) { return new LetterWriter.ParamFunc ({op:"!",l:l}) })(pos0.offset, pos0.line, pos0.column, result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_relation_expr();
          }
        }
        return result0;
      }
      
      function parse_relation_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_equality_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 60) {
              result2 = "<";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "<=") {
                result2 = "<=";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<=\"");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos.offset) === 62) {
                  result2 = ">";
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                if (result2 === null) {
                  if (input.substr(pos.offset, 2) === ">=") {
                    result2 = ">=";
                    advance(pos, 2);
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\">=\"");
                    }
                  }
                }
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_linespc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_linespc();
              }
              if (result3 !== null) {
                result4 = parse_relation_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, op, r) { return new LetterWriter.ParamFunc ({l:l,r:r,op:op}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_equality_expr();
        }
        return result0;
      }
      
      function parse_equality_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_primary_expr();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_linespc();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_linespc();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 2) === "!=") {
              result2 = "!=";
              advance(pos, 2);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!=\"");
              }
            }
            if (result2 === null) {
              if (input.substr(pos.offset, 2) === "==") {
                result2 = "==";
                advance(pos, 2);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"==\"");
                }
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_linespc();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_linespc();
              }
              if (result3 !== null) {
                result4 = parse_relation_expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, l, op, r) { return new LetterWriter.ParamFunc ({l:l,r:r,op:op}) })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_primary_expr();
        }
        return result0;
      }
      
      function parse_primary_expr() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_numeric_literal();
        if (result0 !== null) {
          result0 = (function(offset, line, column, n) { return new LetterWriter.ParamFunc ({op:"#",value:n}) })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_string_literal();
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return new LetterWriter.ParamFunc ({op:"'",value:s}) })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_param_func();
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 40) {
                result0 = "(";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (result0 !== null) {
                result1 = [];
                result2 = parse_linespc();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_linespc();
                }
                if (result1 !== null) {
                  result2 = parse_sum_expr();
                  if (result2 !== null) {
                    result3 = [];
                    result4 = parse_linespc();
                    while (result4 !== null) {
                      result3.push(result4);
                      result4 = parse_linespc();
                    }
                    if (result3 !== null) {
                      if (input.charCodeAt(pos.offset) === 41) {
                        result4 = ")";
                        advance(pos, 1);
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result4 !== null) {
                        result0 = [result0, result1, result2, result3, result4];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, e) { return e; })(pos0.offset, pos0.line, pos0.column, result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        return result0;
      }
      
      function parse_string_literal() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_double_quoted_text();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, s) { return s })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 39) {
            result0 = "'";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_single_quoted_text();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 39) {
                result2 = "'";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, s) { return s })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        return result0;
      }
      
      function parse_double_quoted_text() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "\\\\") {
          result0 = "\\\\";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\\\\\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_double_quoted_text();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "\\" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (/^["]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[\"]");
              }
            }
            if (result1 !== null) {
              result2 = parse_double_quoted_text();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, escaped, tail) { return escaped + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (/^[^"]/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"]");
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                if (/^[^"]/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\"]");
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_double_quoted_text();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, chars, tail) { return chars.join("") + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      function parse_single_quoted_text() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "\\\\") {
          result0 = "\\\\";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\\\\\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_single_quoted_text();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tail) { return "\\" + tail; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 92) {
            result0 = "\\";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result0 !== null) {
            if (/^[']/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[']");
              }
            }
            if (result1 !== null) {
              result2 = parse_single_quoted_text();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, escaped, tail) { return escaped + tail; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (/^[^']/.test(input.charAt(pos.offset))) {
              result1 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^']");
              }
            }
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                if (/^[^']/.test(input.charAt(pos.offset))) {
                  result1 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^']");
                  }
                }
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_single_quoted_text();
              result1 = result1 !== null ? result1 : "";
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, chars, tail) { return chars.join("") + tail; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
          var params = []
          var scoreParam = undefined, scoreParamType = undefined
          var anonNonterms = 0
          var lhsStack = []
          var nonterms = []
          var nontermObj = {}
          var undo = {}
          var title = "The Letter"
          var roles = 1
      
          function extend(a,b) { return LetterWriter.extend(a,b) }
      
          function addScoreParam(t,p) {
      	scoreParam = p;
      	scoreParamType = t;
      	return true;
          }
      
          function addParam(p,v,min,max) {
      	if (/^not$/i.test(p))
      	    throw "You cannot have a parameter called 'not', because 'not' is a reserved keyword. Can you use another parameter name?";
      	params.push (new LetterWriter.Param(p,v,min,max))
      	return true;
          }
      
          function pushLhs(sym) { lhsStack.push(sym); nonterms.push(sym); return true }
          function popLhs() { return lhsStack.pop() }
          function currentLhs() { return getNontermObject (lhsStack[lhsStack.length - 1]) }
          function addRule(weight,hint,rhs,props) { currentLhs().addRule(weight,hint,rhs,props); return true }
      
          function makeAnonId() { return ++anonNonterms; }
          function isAnonId (sym) { return /^[\d]+$/.test(sym) }
          function defaultPrompt (sym) { return isAnonId(sym) ? undefined : (sym.replace(/_/g, ' ')+"?") }
          function defaultStart() { return LetterWriter.defaultStart() }
      
          function setNontermProperties(nonterm,props) {
      	if ("preamble" in props)
      	    nonterm.preamble = props.preamble;
      	if ("placeholder" in props)
      	    nonterm.placeholder = props.placeholder;
      	if ("prompt" in props)
      	    nonterm.prompt = props.prompt;
      	if (("maxUsage" in props) && props.maxUsage > 0)
      	    nonterm.maxUsage = props.maxUsage;
      	if ("pause" in props)
      	    nonterm.pause = props.pause;
      	if ("commit" in props)
      	    nonterm.commit = props.commit;
      	if ("random" in props)
      	    nonterm.random = props.random;
      	if ("role" in props)
      	    nonterm.role = props.role;
      
      	if (nonterm.random) {
      	    if (nonterm.commit) {
      		console.log ("In @" + nonterm.id + ": can't commit at randomized choices. Clearing 'commit', keeping 'random'")
      		nonterm.commit = false
      	    }
      	    if (nonterm.pause) {
      		console.log ("In @" + nonterm.id + ": can't pause at randomized choices. Clearing 'pause', keeping 'random'")
      		nonterm.pause = false
      	    }
      	}
      
      	return true;
          }
      
          function makeTerm(text) {
      	return new LetterWriter.Term(text)
          }
      
          function getNontermObject(sym) {
      	sym = "" + sym;  // force string
      	if (!(sym in nontermObj))
      	    nontermObj[sym.toLowerCase()] = new LetterWriter.Nonterm(sym,defaultPrompt(sym),isAnonId(sym));
      	return nontermObj[sym.toLowerCase()];
          }
      
          function makeNontermReference(sym,props) {
      	return getNontermObject(sym).makeReference(props).sanitizeQualifiers()
          }
      
          function makeAnonNontermReference(sym,props) {
      	var anon = getNontermObject(sym)
      	setNontermProperties(anon,props)
      	return anon.makeReference({}).sanitizeQualifiers()
          }
      
          function getStart() {
      	var rhsSymbol = {};
      	for (var lhs in nontermObj) {
      	    for (var i = 0; i < nontermObj[lhs].rules.length; ++i) {
      		var rule = nontermObj[lhs].rules[i];
      		var rhs = rule.rhs;
      		for (var j = 0; j < rhs.length; ++j) {
      		    var sym = rhs[j];
      		    if (sym instanceof LetterWriter.NontermReference) {
      			var id = sym.nonterminal.id;
      			rhsSymbol[id] = true;
      			// do some qualifier validation, now that all the nonterminal properties have been declared
      			sym.sanitizeQualifiers()
      		    }
      		}
      	    }
      	}
      
      	for (var sym in rhsSymbol) {
      	    if (!nontermObj[sym].rules.length) {
      		console.log ("Symbol @" + sym + " is never defined");
      	    }
      	}
      
      	var notOnRhs = [], candidateStart = [];
      	for (var lhs in nontermObj) {
      	    if (!(lhs in rhsSymbol) && lhs != defaultStart()) {
      		notOnRhs.push (lhs);
      		if (!nontermObj[lhs].random)
      		    candidateStart.push (lhs)
      	    }
      	}
      
      	if (notOnRhs.length > 0)
      	    console.log ("The following symbols are defined, but never used: " + notOnRhs.map(function(x){return"@"+x}).join(" "));
      
      	var start;
      	if (defaultStart() in nontermObj) {
      	    if (notOnRhs.length > 0)
      		console.log ("However, @" + defaultStart() + " is defined, so we're using that as the root.");
      	    start = defaultStart();
      	} else if (candidateStart.length) {
      	    start = candidateStart[0];
      	    if (candidateStart.length == 1)
      		console.log ("Of these, @" + start + " makes a natural choice for the start symbol. Use @" + defaultStart() + " to override.");
      	    else
      		console.log ("The first of these symbols to be defined as a human-played phrase was @" + start + " so we'll use that as the root.");
      	} else if (nonterms.length) {
      	    start = nonterms[0];
      	    console.log ("The first symbol to be defined was @" + start + " so we'll use that as the root.");
      	}
      
      	if (nontermObj[start].random) {
      	    console.log ("Warning: clearing 'random' property of @" + start + ", because it's the start symbol")
      	    nontermObj[start].random = false;
      	}
      
      	return nontermObj[start];
          }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
